{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\works\\\\crediflow\\\\frontend\\\\crediflow-frontend\\\\src\\\\pages\\\\report.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//     if (!reportId) return [];\n//     return [\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//     ];\n//   };\n\n// const ReportPage = () => {\n//   const [selectedReport, setSelectedReport] = useState(null);\n\n//   const { data: options = [] } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [] } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* <Select onValueChange={setSelectedReport}> */}\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {options.map((option) => (\n//                 //   <SelectItem key={option.id} value={option.id}>\n//                 //     {option.label}\n//                 //   </SelectItem>\n//                 <SelectItem key={option.id} value={option.id.toString()}>\n//                  {option.label}\n//                 </SelectItem>\n\n//                 ))}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {selectedReport && (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState,useEffect } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// // Spinner component for loading state\n// const LoadingSpinner = () => (\n//   <div className=\"flex justify-center items-center\">\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\n//   </div>\n// );\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//   if (!reportId) return [];\n//   return [\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//   ];\n// };\n\n// const ReportPage = () => {\n//   const { state } = useLocation();\n//   const [selectedReport, setSelectedReport] = useState(null);\n//   const [data, setData] = useState(null); // Store the API data\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [reportData, setReportData] = useState(null);\n\n//   const fileName = state?.fileName\n//   console.log(\"file :\",fileName)\n\n//   useEffect(() => {\n//     if (fileName) {\n//       const fetchReportData = async () => {\n//         setIsLoading(true);\n//         try {\n//           // Assuming the API is expecting a POST request with a JSON body\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\n//             fileName: fileName,\n//           });\n//           console.log('API response:', response.data);\n//           setReportData(response.data); // Store the response data\n//         } catch (error) {\n//           console.error('Error fetching report data:', error);\n//         } finally {\n//           setIsLoading(false);\n//         }\n//       };\n\n//       fetchReportData();\n//     }\n//   }, [fileName]);\n\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport // Only fetch if a report is selected\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* Select dropdown for report */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {optionsLoading ? (\n//                   <SelectItem disabled>Loading reports...</SelectItem>\n//                 ) : optionsError ? (\n//                   <SelectItem disabled>Error loading reports</SelectItem>\n//                 ) : (\n//                   options.map((option) => (\n//                     <SelectItem key={option.id} value={option.id.toString()}>\n//                       {option.label}\n//                     </SelectItem>\n//                   ))\n//                 )}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {reportLoading ? (\n//             <div className=\"text-center text-white\">\n//               <p>Loading report data...</p>\n//             </div>\n//           ) : reportError ? (\n//             <div className=\"text-center text-red-600\">\n//               <p>Error loading report data. Please try again later.</p>\n//             </div>\n//           ) : selectedReport && reportData.length > 0 ? (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           ) : (\n//             <div className=\"text-center text-white\">\n//               <p>No data available for the selected report.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchOptions = async () => {\n  return [{\n    id: 1,\n    label: \"January 2025 Report\"\n  }, {\n    id: 2,\n    label: \"February 2025 Report\"\n  }, {\n    id: 3,\n    label: \"March 2025 Report\"\n  }];\n};\nconst ReportPage = () => {\n  _s();\n  const [reportData, setReportData] = useState(null);\n  const [error, setError] = useState(null);\n  const {\n    state\n  } = useLocation();\n  const {\n    myData\n  } = state || {};\n  const [selectedReport, setSelectedReport] = useState('');\n  const [reportKeys, setReportKeys] = useState([]);\n  useEffect(() => {\n    if (fileName) {\n      const fetchReportData = async () => {\n        setIsLoading(true);\n        try {\n          const response = await axios.post('http://127.0.0.1:5000/start-process', {\n            fileName: fileName\n          });\n          setReportData(response.data);\n        } catch (error) {\n          setError(\"Error fetching report data\");\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchReportData();\n    }\n  }, [fileName]);\n  const {\n    data: options = [],\n    isLoading: optionsLoading,\n    error: optionsError\n  } = useQuery({\n    queryKey: ['reportOptions'],\n    queryFn: fetchOptions\n  });\n  const isGlobalLoading = optionsLoading || isLoading;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl md:text-4xl font-bold text-white mb-8\",\n        children: \"Crediflow report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white/95 rounded-lg shadow-xl p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-md mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedReport,\n            onChange: setSelectedReport,\n            children: [/*#__PURE__*/_jsxDEV(SelectTrigger, {\n              className: \"w-full\",\n              children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                placeholder: \"Select a report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n              children: optionsLoading ? /*#__PURE__*/_jsxDEV(SelectItem, {\n                disabled: true,\n                children: \"Loading reports...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this) : optionsError ? /*#__PURE__*/_jsxDEV(SelectItem, {\n                disabled: true,\n                children: \"Error loading reports\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this) : options.map(option => /*#__PURE__*/_jsxDEV(SelectItem, {\n                value: option.id.toString(),\n                children: option.label\n              }, option.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), isGlobalLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-red-600\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this) : selectedReport && reportData && reportData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: reportData.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: row.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: [\"$\", row.amount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: row.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 23\n                }, this)]\n              }, row.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data available for the selected report.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportPage, \"+sShI+9kXtF+WLtueCys5Clr+30=\", false, function () {\n  return [useLocation, useQuery];\n});\n_c = ReportPage;\nexport default ReportPage;\nvar _c;\n$RefreshReg$(_c, \"ReportPage\");","map":{"version":3,"names":["React","useState","useEffect","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","Table","TableBody","TableCell","TableHead","TableHeader","TableRow","useQuery","useLocation","axios","jsxDEV","_jsxDEV","fetchOptions","id","label","ReportPage","_s","reportData","setReportData","error","setError","state","myData","selectedReport","setSelectedReport","reportKeys","setReportKeys","fileName","fetchReportData","setIsLoading","response","post","data","options","isLoading","optionsLoading","optionsError","queryKey","queryFn","isGlobalLoading","className","children","_jsxFileName","lineNumber","columnNumber","value","onChange","placeholder","disabled","map","option","toString","LoadingSpinner","length","row","name","amount","status","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/works/crediflow/frontend/crediflow-frontend/src/pages/report.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//     if (!reportId) return [];\r\n//     return [\r\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//     ];\r\n//   };\r\n\r\n// const ReportPage = () => {\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n\r\n//   const { data: options = [] } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [] } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* <Select onValueChange={setSelectedReport}> */}\r\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n\r\n\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {options.map((option) => (\r\n//                 //   <SelectItem key={option.id} value={option.id}>\r\n//                 //     {option.label}\r\n//                 //   </SelectItem>\r\n//                 <SelectItem key={option.id} value={option.id.toString()}>\r\n//                  {option.label}\r\n//                 </SelectItem>\r\n\r\n//                 ))}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {selectedReport && (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { useState,useEffect } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n\r\n// // Spinner component for loading state\r\n// const LoadingSpinner = () => (\r\n//   <div className=\"flex justify-center items-center\">\r\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\r\n//   </div>\r\n// );\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//   if (!reportId) return [];\r\n//   return [\r\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//   ];\r\n// };\r\n\r\n// const ReportPage = () => {\r\n//   const { state } = useLocation();\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n//   const [data, setData] = useState(null); // Store the API data\r\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [reportData, setReportData] = useState(null);\r\n\r\n//   const fileName = state?.fileName\r\n//   console.log(\"file :\",fileName)\r\n\r\n//   useEffect(() => {\r\n//     if (fileName) {\r\n//       const fetchReportData = async () => {\r\n//         setIsLoading(true);\r\n//         try {\r\n//           // Assuming the API is expecting a POST request with a JSON body\r\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\r\n//             fileName: fileName,\r\n//           });\r\n//           console.log('API response:', response.data);\r\n//           setReportData(response.data); // Store the response data\r\n//         } catch (error) {\r\n//           console.error('Error fetching report data:', error);\r\n//         } finally {\r\n//           setIsLoading(false);\r\n//         }\r\n//       };\r\n\r\n//       fetchReportData();\r\n//     }\r\n//   }, [fileName]);\r\n\r\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport // Only fetch if a report is selected\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* Select dropdown for report */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {optionsLoading ? (\r\n//                   <SelectItem disabled>Loading reports...</SelectItem>\r\n//                 ) : optionsError ? (\r\n//                   <SelectItem disabled>Error loading reports</SelectItem>\r\n//                 ) : (\r\n//                   options.map((option) => (\r\n//                     <SelectItem key={option.id} value={option.id.toString()}>\r\n//                       {option.label}\r\n//                     </SelectItem>\r\n//                   ))\r\n//                 )}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {reportLoading ? (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>Loading report data...</p>\r\n//             </div>\r\n//           ) : reportError ? (\r\n//             <div className=\"text-center text-red-600\">\r\n//               <p>Error loading report data. Please try again later.</p>\r\n//             </div>\r\n//           ) : selectedReport && reportData.length > 0 ? (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           ) : (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>No data available for the selected report.</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst fetchOptions = async () => {\r\n  return [\r\n    { id: 1, label: \"January 2025 Report\" },\r\n    { id: 2, label: \"February 2025 Report\" },\r\n    { id: 3, label: \"March 2025 Report\" }\r\n  ];\r\n};\r\n\r\nconst ReportPage = () => {\r\n  \r\n  const [reportData, setReportData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { state } = useLocation();\r\n  const { myData } = state || {};\r\n\r\n  const [selectedReport, setSelectedReport] = useState('');\r\n  const [reportKeys, setReportKeys] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (fileName) {\r\n      const fetchReportData = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n          const response = await axios.post('http://127.0.0.1:5000/start-process', {\r\n            fileName: fileName,\r\n          });\r\n          setReportData(response.data);\r\n        } catch (error) {\r\n          setError(\"Error fetching report data\");\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchReportData();\r\n    }\r\n  }, [fileName]);\r\n\r\n  const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\r\n    queryKey: ['reportOptions'],\r\n    queryFn: fetchOptions\r\n  });\r\n\r\n  const isGlobalLoading = optionsLoading || isLoading;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n          Crediflow report\r\n        </h1>\r\n\r\n        <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n          <div className=\"max-w-md mb-8\">\r\n            <Select value={selectedReport} onChange={setSelectedReport}>\r\n              <SelectTrigger className=\"w-full\">\r\n                <SelectValue placeholder=\"Select a report\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {optionsLoading ? (\r\n                  <SelectItem disabled>Loading reports...</SelectItem>\r\n                ) : optionsError ? (\r\n                  <SelectItem disabled>Error loading reports</SelectItem>\r\n                ) : (\r\n                  options.map((option) => (\r\n                    <SelectItem key={option.id} value={option.id.toString()}>\r\n                      {option.label}\r\n                    </SelectItem>\r\n                  ))\r\n                )}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {isGlobalLoading ? (\r\n            <div className=\"text-center text-white\">\r\n              <LoadingSpinner />\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"text-center text-red-600\">\r\n              <p>{error}</p>\r\n            </div>\r\n          ) : selectedReport && reportData && reportData.length > 0 ? (\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Name</TableHead>\r\n                    <TableHead>Amount</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {reportData.map((row) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell>{row.name}</TableCell>\r\n                      <TableCell>${row.amount}</TableCell>\r\n                      <TableCell>{row.status}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-white\">\r\n              <p>No data available for the selected report.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}