{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\works\\\\crediflow\\\\frontend\\\\src\\\\pages\\\\report.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\n\n// Function to convert JSON data to CSV format\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst convertToCSV = data => {\n  const keys = Object.keys(data[0]);\n  const csvRows = [];\n\n  // Add headers\n  csvRows.push(keys.join(','));\n\n  // Add data rows\n  data.forEach(row => {\n    const values = keys.map(key => {\n      let value = row[key];\n      if (typeof value === 'string' && value.includes(',')) {\n        // Remove commas from numbers represented as strings\n        value = value.replace(/,/g, '');\n      }\n      return value;\n    });\n    csvRows.push(values.join(','));\n  });\n  return csvRows.join('\\n');\n};\n\n// Function to trigger the download\nconst downloadCSV = (data, fileName) => {\n  const csvData = convertToCSV(data);\n  const blob = new Blob([csvData], {\n    type: 'text/csv'\n  });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = fileName || 'report.csv';\n  a.click();\n  window.URL.revokeObjectURL(url);\n};\nconst ReportPage = () => {\n  _s();\n  const [selectedReport, setSelectedReport] = useState('');\n  const [tableColumns, setTableColumns] = useState([]);\n  const [reportData, setReportData] = useState({});\n  const {\n    state\n  } = useLocation();\n  const {\n    myData\n  } = state || {};\n  useEffect(() => {\n    if (selectedReport && myData[selectedReport]) {\n      const parsedData = JSON.parse(myData[selectedReport]);\n      const columnsSet = new Set();\n      if (Array.isArray(parsedData)) {\n        parsedData.forEach(item => {\n          Object.keys(item).forEach(key => {\n            if (key !== \"Particular\") {\n              columnsSet.add(key);\n            }\n          });\n        });\n      }\n      setTableColumns(Array.from(columnsSet));\n      setReportData(parsedData);\n    }\n  }, [selectedReport, myData]);\n\n  // Function to handle nested objects (flatten or format them)\n  const formatCellValue = value => {\n    if (typeof value === 'object' && value !== null) {\n      return JSON.stringify(value, null, 2); // Pretty print JSON object\n    }\n    return value !== null && value !== void 0 ? value : \"-\"; // Handle null or undefined\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl md:text-4xl font-bold text-white mb-8\",\n        children: \"Crediflow Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white/95 rounded-lg shadow-xl p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-md mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedReport,\n            onValueChange: value => setSelectedReport(value),\n            children: [/*#__PURE__*/_jsxDEV(SelectTrigger, {\n              className: \"w-full\",\n              children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                placeholder: \"Select a report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n              children: myData && Object.keys(myData).map(key => /*#__PURE__*/_jsxDEV(SelectItem, {\n                value: key,\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), selectedReport && reportData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Particular\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 21\n                }, this), tableColumns.map(col => /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: Array.isArray(reportData) ? reportData.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: row.Particular\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 25\n                }, this), tableColumns.map(col => /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: formatCellValue(row[col])\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 27\n                }, this))]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 23\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: reportData.Particular\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 23\n                }, this), tableColumns.map(col => /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: formatCellValue(reportData[col])\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data available for the selected report.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), reportData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => downloadCSV(reportData, 'report.csv'),\n          className: \"mt-4 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-700\",\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportPage, \"Q6jwxdtO1Cqs+eOKYANymXSHAgo=\", false, function () {\n  return [useLocation];\n});\n_c = ReportPage;\nexport default ReportPage;\nvar _c;\n$RefreshReg$(_c, \"ReportPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Table","TableBody","TableCell","TableHead","TableHeader","TableRow","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","jsxDEV","_jsxDEV","convertToCSV","data","keys","Object","csvRows","push","join","forEach","row","values","map","key","value","includes","replace","downloadCSV","fileName","csvData","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","ReportPage","_s","selectedReport","setSelectedReport","tableColumns","setTableColumns","reportData","setReportData","state","myData","parsedData","JSON","parse","columnsSet","Set","Array","isArray","item","add","from","formatCellValue","stringify","className","children","_jsxFileName","lineNumber","columnNumber","onValueChange","placeholder","col","index","Particular","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/works/crediflow/frontend/src/pages/report.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n\r\n// Function to convert JSON data to CSV format\r\nconst convertToCSV = (data) => {\r\n  const keys = Object.keys(data[0]);\r\n  const csvRows = [];\r\n\r\n  // Add headers\r\n  csvRows.push(keys.join(','));\r\n\r\n  // Add data rows\r\n  data.forEach(row => {\r\n    const values = keys.map(key => {\r\n      let value = row[key];\r\n      if (typeof value === 'string' && value.includes(',')) {\r\n        // Remove commas from numbers represented as strings\r\n        value = value.replace(/,/g, '');\r\n      }\r\n      return value;\r\n    });\r\n    csvRows.push(values.join(','));\r\n  });\r\n\r\n  return csvRows.join('\\n');\r\n};\r\n\r\n// Function to trigger the download\r\nconst downloadCSV = (data, fileName) => {\r\n  const csvData = convertToCSV(data);\r\n  const blob = new Blob([csvData], { type: 'text/csv' });\r\n  const url = window.URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = fileName || 'report.csv';\r\n  a.click();\r\n  window.URL.revokeObjectURL(url);\r\n};\r\n\r\nconst ReportPage = () => {\r\n  const [selectedReport, setSelectedReport] = useState('');\r\n  const [tableColumns, setTableColumns] = useState([]);\r\n  const [reportData, setReportData] = useState({});\r\n  const { state } = useLocation();\r\n  const { myData } = state || {};\r\n\r\n  useEffect(() => {\r\n    if (selectedReport && myData[selectedReport]) {\r\n      const parsedData = JSON.parse(myData[selectedReport]);\r\n\r\n      const columnsSet = new Set();\r\n      if (Array.isArray(parsedData)) {\r\n        parsedData.forEach(item => {\r\n          Object.keys(item).forEach(key => {\r\n            if (key !== \"Particular\") {\r\n              columnsSet.add(key);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      setTableColumns(Array.from(columnsSet));\r\n      setReportData(parsedData);\r\n    }\r\n  }, [selectedReport, myData]);\r\n\r\n  // Function to handle nested objects (flatten or format them)\r\n  const formatCellValue = (value) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      return JSON.stringify(value, null, 2); // Pretty print JSON object\r\n    }\r\n    return value ?? \"-\"; // Handle null or undefined\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">Crediflow Report</h1>\r\n\r\n        <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n          <div className=\"max-w-md mb-8\">\r\n            <Select value={selectedReport} onValueChange={(value) => setSelectedReport(value)}>\r\n              <SelectTrigger className=\"w-full\">\r\n                <SelectValue placeholder=\"Select a report\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {myData && Object.keys(myData).map((key) => (\r\n                  <SelectItem key={key} value={key}>\r\n                    {key}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {selectedReport && reportData ? (\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Particular</TableHead>\r\n                    {tableColumns.map((col) => (\r\n                      <TableHead key={col}>{col}</TableHead>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {Array.isArray(reportData) ? (\r\n                    reportData.map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell>{row.Particular}</TableCell>\r\n                        {tableColumns.map((col) => (\r\n                          <TableCell key={col}>\r\n                            {formatCellValue(row[col])}\r\n                          </TableCell>\r\n                        ))}\r\n                      </TableRow>\r\n                    ))\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell>{reportData.Particular}</TableCell>\r\n                      {tableColumns.map((col) => (\r\n                        <TableCell key={col}>\r\n                          {formatCellValue(reportData[col])}\r\n                        </TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-white\">\r\n              <p>No data available for the selected report.</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Download Button */}\r\n          {reportData.length > 0 && (\r\n            <button\r\n              onClick={() => downloadCSV(reportData, 'report.csv')}\r\n              className=\"mt-4 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-700\"\r\n            >\r\n              Download CSV\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}