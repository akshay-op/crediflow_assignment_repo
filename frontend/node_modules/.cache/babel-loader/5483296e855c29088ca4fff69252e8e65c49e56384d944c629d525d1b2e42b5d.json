{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\works\\\\crediflow\\\\frontend\\\\crediflow-frontend\\\\src\\\\pages\\\\report.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//     if (!reportId) return [];\n//     return [\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//     ];\n//   };\n\n// const ReportPage = () => {\n//   const [selectedReport, setSelectedReport] = useState(null);\n\n//   const { data: options = [] } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [] } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* <Select onValueChange={setSelectedReport}> */}\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {options.map((option) => (\n//                 //   <SelectItem key={option.id} value={option.id}>\n//                 //     {option.label}\n//                 //   </SelectItem>\n//                 <SelectItem key={option.id} value={option.id.toString()}>\n//                  {option.label}\n//                 </SelectItem>\n\n//                 ))}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {selectedReport && (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\nimport React, { useState, useEffect } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Spinner component for loading state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"flex justify-center items-center\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 138,\n  columnNumber: 3\n}, this);\n\n// Mock API calls - replace these with actual API endpoints\n_c = LoadingSpinner;\nconst fetchOptions = async () => {\n  // Simulate API call\n  return [{\n    id: 1,\n    label: \"January 2025 Report\"\n  }, {\n    id: 2,\n    label: \"February 2025 Report\"\n  }, {\n    id: 3,\n    label: \"March 2025 Report\"\n  }];\n};\nconst fetchReportData = async reportId => {\n  if (!reportId) return [];\n  return [{\n    id: 1,\n    name: \"John Doe\",\n    amount: 1000,\n    status: \"Paid\"\n  }, {\n    id: 2,\n    name: \"Jane Smith\",\n    amount: 2000,\n    status: \"Pending\"\n  }, {\n    id: 3,\n    name: \"Bob Johnson\",\n    amount: 1500,\n    status: \"Paid\"\n  }];\n};\nconst ReportPage = () => {\n  _s();\n  const [selectedReport, setSelectedReport] = useState(null);\n  const {\n    data: options = [],\n    isLoading: optionsLoading,\n    error: optionsError\n  } = useQuery({\n    queryKey: ['reportOptions'],\n    queryFn: fetchOptions\n  });\n  const {\n    data: reportData = [],\n    isLoading: reportLoading,\n    error: reportError\n  } = useQuery({\n    queryKey: ['reportData', selectedReport],\n    queryFn: () => fetchReportData(selectedReport),\n    enabled: !!selectedReport // Only fetch if a report is selected\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl md:text-4xl font-bold text-white mb-8\",\n        children: \"Crediflow report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white/95 rounded-lg shadow-xl p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-md mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedReport,\n            onChange: setSelectedReport,\n            children: [/*#__PURE__*/_jsxDEV(SelectTrigger, {\n              className: \"w-full\",\n              children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                placeholder: \"Select a report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n              children: optionsLoading ? /*#__PURE__*/_jsxDEV(SelectItem, {\n                disabled: true,\n                children: \"Loading reports...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this) : optionsError ? /*#__PURE__*/_jsxDEV(SelectItem, {\n                disabled: true,\n                children: \"Error loading reports\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this) : options.map(option => /*#__PURE__*/_jsxDEV(SelectItem, {\n                value: option.id.toString(),\n                children: option.label\n              }, option.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), reportLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading report data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this) : reportError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-red-600\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error loading report data. Please try again later.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this) : selectedReport && reportData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: reportData.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: row.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: [\"$\", row.amount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: row.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 23\n                }, this)]\n              }, row.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data available for the selected report.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportPage, \"aes5uwy0uOxptpkGMyjuGPnQA6c=\", false, function () {\n  return [useQuery, useQuery];\n});\n_c2 = ReportPage;\nexport default ReportPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"ReportPage\");","map":{"version":3,"names":["React","useState","useEffect","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","Table","TableBody","TableCell","TableHead","TableHeader","TableRow","useQuery","jsxDEV","_jsxDEV","LoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","fetchOptions","id","label","fetchReportData","reportId","name","amount","status","ReportPage","_s","selectedReport","setSelectedReport","data","options","isLoading","optionsLoading","error","optionsError","queryKey","queryFn","reportData","reportLoading","reportError","enabled","value","onChange","placeholder","disabled","map","option","toString","length","row","_c2","$RefreshReg$"],"sources":["C:/Users/USER/Documents/works/crediflow/frontend/crediflow-frontend/src/pages/report.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//     if (!reportId) return [];\r\n//     return [\r\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//     ];\r\n//   };\r\n\r\n// const ReportPage = () => {\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n\r\n//   const { data: options = [] } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [] } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* <Select onValueChange={setSelectedReport}> */}\r\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n\r\n\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {options.map((option) => (\r\n//                 //   <SelectItem key={option.id} value={option.id}>\r\n//                 //     {option.label}\r\n//                 //   </SelectItem>\r\n//                 <SelectItem key={option.id} value={option.id.toString()}>\r\n//                  {option.label}\r\n//                 </SelectItem>\r\n\r\n//                 ))}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {selectedReport && (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n\r\nimport React, { useState,useEffect } from 'react';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"../components/ui/select\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"../components/ui/table\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\n\r\n\r\n// Spinner component for loading state\r\nconst LoadingSpinner = () => (\r\n  <div className=\"flex justify-center items-center\">\r\n    <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\r\n  </div>\r\n);\r\n\r\n// Mock API calls - replace these with actual API endpoints\r\nconst fetchOptions = async () => {\r\n  // Simulate API call\r\n  return [\r\n    { id: 1, label: \"January 2025 Report\" },\r\n    { id: 2, label: \"February 2025 Report\" },\r\n    { id: 3, label: \"March 2025 Report\" }\r\n  ];\r\n};\r\n\r\nconst fetchReportData = async (reportId) => {\r\n  if (!reportId) return [];\r\n  return [\r\n    { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n    { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n    { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n  ];\r\n};\r\n\r\nconst ReportPage = () => {\r\n  const [selectedReport, setSelectedReport] = useState(null);\r\n\r\n  const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\r\n    queryKey: ['reportOptions'],\r\n    queryFn: fetchOptions\r\n  });\r\n\r\n  const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\r\n    queryKey: ['reportData', selectedReport],\r\n    queryFn: () => fetchReportData(selectedReport),\r\n    enabled: !!selectedReport // Only fetch if a report is selected\r\n  });\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n          Crediflow report\r\n        </h1>\r\n\r\n        <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n          <div className=\"max-w-md mb-8\">\r\n            {/* Select dropdown for report */}\r\n            <Select value={selectedReport} onChange={setSelectedReport}>\r\n              <SelectTrigger className=\"w-full\">\r\n                <SelectValue placeholder=\"Select a report\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {optionsLoading ? (\r\n                  <SelectItem disabled>Loading reports...</SelectItem>\r\n                ) : optionsError ? (\r\n                  <SelectItem disabled>Error loading reports</SelectItem>\r\n                ) : (\r\n                  options.map((option) => (\r\n                    <SelectItem key={option.id} value={option.id.toString()}>\r\n                      {option.label}\r\n                    </SelectItem>\r\n                  ))\r\n                )}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {reportLoading ? (\r\n            <div className=\"text-center text-white\">\r\n              <p>Loading report data...</p>\r\n            </div>\r\n          ) : reportError ? (\r\n            <div className=\"text-center text-red-600\">\r\n              <p>Error loading report data. Please try again later.</p>\r\n            </div>\r\n          ) : selectedReport && reportData.length > 0 ? (\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Name</TableHead>\r\n                    <TableHead>Amount</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {reportData.map((row) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell>{row.name}</TableCell>\r\n                      <TableCell>${row.amount}</TableCell>\r\n                      <TableCell>{row.status}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-white\">\r\n              <p>No data available for the selected report.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}