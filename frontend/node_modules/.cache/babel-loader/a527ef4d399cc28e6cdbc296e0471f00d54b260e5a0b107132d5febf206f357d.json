{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\works\\\\crediflow\\\\frontend\\\\crediflow-frontend\\\\src\\\\pages\\\\report.js\";\n// import React, { useState } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//     if (!reportId) return [];\n//     return [\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//     ];\n//   };\n\n// const ReportPage = () => {\n//   const [selectedReport, setSelectedReport] = useState(null);\n\n//   const { data: options = [] } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [] } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* <Select onValueChange={setSelectedReport}> */}\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {options.map((option) => (\n//                 //   <SelectItem key={option.id} value={option.id}>\n//                 //     {option.label}\n//                 //   </SelectItem>\n//                 <SelectItem key={option.id} value={option.id.toString()}>\n//                  {option.label}\n//                 </SelectItem>\n\n//                 ))}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {selectedReport && (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState,useEffect } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// // Spinner component for loading state\n// const LoadingSpinner = () => (\n//   <div className=\"flex justify-center items-center\">\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\n//   </div>\n// );\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//   if (!reportId) return [];\n//   return [\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//   ];\n// };\n\n// const ReportPage = () => {\n//   const { state } = useLocation();\n//   const [selectedReport, setSelectedReport] = useState(null);\n//   const [data, setData] = useState(null); // Store the API data\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [reportData, setReportData] = useState(null);\n\n//   const fileName = state?.fileName\n//   console.log(\"file :\",fileName)\n\n//   useEffect(() => {\n//     if (fileName) {\n//       const fetchReportData = async () => {\n//         setIsLoading(true);\n//         try {\n//           // Assuming the API is expecting a POST request with a JSON body\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\n//             fileName: fileName,\n//           });\n//           console.log('API response:', response.data);\n//           setReportData(response.data); // Store the response data\n//         } catch (error) {\n//           console.error('Error fetching report data:', error);\n//         } finally {\n//           setIsLoading(false);\n//         }\n//       };\n\n//       fetchReportData();\n//     }\n//   }, [fileName]);\n\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport // Only fetch if a report is selected\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* Select dropdown for report */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {optionsLoading ? (\n//                   <SelectItem disabled>Loading reports...</SelectItem>\n//                 ) : optionsError ? (\n//                   <SelectItem disabled>Error loading reports</SelectItem>\n//                 ) : (\n//                   options.map((option) => (\n//                     <SelectItem key={option.id} value={option.id.toString()}>\n//                       {option.label}\n//                     </SelectItem>\n//                   ))\n//                 )}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {reportLoading ? (\n//             <div className=\"text-center text-white\">\n//               <p>Loading report data...</p>\n//             </div>\n//           ) : reportError ? (\n//             <div className=\"text-center text-red-600\">\n//               <p>Error loading report data. Please try again later.</p>\n//             </div>\n//           ) : selectedReport && reportData.length > 0 ? (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           ) : (\n//             <div className=\"text-center text-white\">\n//               <p>No data available for the selected report.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState, useEffect } from 'react';\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\n// // import { useQuery } from \"@tanstack/react-query\";\n// import { useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// const fetchOptions = async () => {\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const ReportPage = () => {\n\n//   // const [reportData, setReportData] = useState(null);\n//   // const [error, setError] = useState(null);\n\n//   const { state } = useLocation();\n//   const { myData } = state || {};\n\n//   const [selectedReport, setSelectedReport] = useState('');\n//   const [reportKeys, setReportKeys] = useState([]);\n\n//   useEffect(() => {\n//     if (myData) {\n//       const keys = Object.keys(myData);\n//       setReportKeys(keys);\n//     }\n//   }, [myData]);\n\n//   console.log('Selected Report Data:', myData[selectedReport]);\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n\n//           <Select value={selectedReport} onValueChange={setSelectedReport}>\n//           <SelectTrigger className=\"w-full\">\n//             <SelectValue placeholder=\"Select a report\" />\n//           </SelectTrigger>\n//           <SelectContent>\n//             {myData && Object.keys(myData).map((key) => (\n//               <SelectItem key={key} value={String(key)}>\n//                 {key}\n//               </SelectItem>\n//             ))}\n//           </SelectContent>\n//         </Select>\n\n//           </div>\n\n//           {selectedReport && myData[selectedReport] ? (\n//   <div className=\"overflow-x-auto\">\n//     <Table>\n//       <TableHeader>\n//         <TableRow>\n//           <TableHead>Item</TableHead>\n//           <TableHead>2020</TableHead>\n//           <TableHead>2019</TableHead>\n//         </TableRow>\n//       </TableHeader>\n//       <TableBody>\n//         {/* Handle nested objects */}\n//         {Object.entries(myData[selectedReport]).map(([itemName, itemValue]) => {\n//           if (typeof itemValue === \"object\" && !Array.isArray(itemValue)) {\n//             // If it's nested like \"Non-current assets\"\n//             return Object.entries(itemValue).map(([subItemName, subItemValue]) => (\n//               <TableRow key={itemName + subItemName}>\n//                 <TableCell className=\"font-medium\">{subItemName}</TableCell>\n//                 <TableCell>{subItemValue?.[\"2020\"] ?? \"-\"}</TableCell>\n//                 <TableCell>{subItemValue?.[\"2019\"] ?? \"-\"}</TableCell>\n//               </TableRow>\n//             ));\n//           } else {\n//             // Normal field\n//             return (\n//               <TableRow key={itemName}>\n//                 <TableCell className=\"font-medium\">{itemName}</TableCell>\n//                 <TableCell>{itemValue?.[\"2020\"] ?? \"-\"}</TableCell>\n//                 <TableCell>{itemValue?.[\"2019\"] ?? \"-\"}</TableCell>\n//               </TableRow>\n//             );\n//           }\n//         })}\n//       </TableBody>\n//     </Table>\n//   </div>\n// )  : (\n//             <div className=\"text-center text-white\">\n//               <p>No data available for the selected report.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom';\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\n\n// const ReportPage = () => {\n//   const [selectedReport, setSelectedReport] = useState('');\n//   const [yearColumns, setYearColumns] = useState([]);\n//   const { state } = useLocation();\n//   const { myData } = state || {};\n\n//   useEffect(() => {\n//     if (selectedReport && myData[selectedReport]) {\n//       // Dynamically find all unique years/columns from data\n//       const yearsSet = new Set();\n\n//       myData[selectedReport].forEach(section => {\n//         Object.values(section).forEach(value => {\n//           if (typeof value === 'object' && value !== null) {\n//             Object.keys(value).forEach(year => {\n//               yearsSet.add(year);\n//             });\n//           }\n//         });\n//       });\n\n//       setYearColumns(Array.from(yearsSet).sort()); // Sorting years if needed\n//     }\n//   }, [selectedReport, myData]);\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">Crediflow report</h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n\n//             <Select value={selectedReport} onValueChange={(value) => setSelectedReport(value)}>\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {myData && Object.keys(myData).map((key) => (\n//                   <SelectItem key={key} value={key}>\n//                     {key}\n//                   </SelectItem>\n//                 ))}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {selectedReport && Array.isArray(myData[selectedReport]) ? (\n//   <div className=\"overflow-x-auto\">\n//     <Table>\n//       <TableHeader>\n//         <TableRow>\n//           <TableHead>Item</TableHead>\n//           {yearColumns.map((year) => (\n//             <TableHead key={year}>{year}</TableHead>\n//           ))}\n//         </TableRow>\n//       </TableHeader>\n//       <TableBody>\n//         {myData[selectedReport].map((section, sectionIndex) => (\n//           Object.entries(section).map(([itemName, itemValue]) => {\n//             if (typeof itemValue === \"string\") {\n//               return (\n//                 <TableRow key={sectionIndex + itemName}>\n//                   <TableCell colSpan={1 + yearColumns.length} className=\"font-bold bg-gray-100 text-gray-700\">\n//                     {itemName}\n//                   </TableCell>\n//                 </TableRow>\n//               );\n//             } else if (typeof itemValue === \"object\") {\n//               return (\n//                 <TableRow key={sectionIndex + itemName}>\n//                   <TableCell className=\"font-medium\">{itemName}</TableCell>\n//                   {yearColumns.map((year) => (\n//                     <TableCell key={year}>\n//                       {itemValue[year] ?? \"-\"}\n//                     </TableCell>\n//                   ))}\n//                 </TableRow>\n//               );\n//             } else {\n//               return null;\n//             }\n//           })\n//         ))}\n//       </TableBody>\n//     </Table>\n//   </div>\n// ) : (\n//   <div className=\"text-center text-white\">\n//     <p>No data available for the selected report.</p>\n//   </div>\n// )}\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportPage = ({\n  myData,\n  selectedReport\n}) => {\n  if (!selectedReport || !myData[selectedReport]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please select a report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 12\n    }, this);\n  }\n  const data = myData[selectedReport];\n  if (!Array.isArray(data)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid data format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Step 1: Collect all possible column names dynamically\n  const columnsSet = new Set();\n  data.forEach(section => {\n    Object.entries(section).forEach(([key, value]) => {\n      if (typeof value === \"object\" && value !== null) {\n        Object.keys(value).forEach(year => {\n          columnsSet.add(year);\n        });\n      }\n    });\n  });\n  const columns = Array.from(columnsSet);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"w-full text-sm text-left text-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"text-xs text-gray-700 uppercase bg-gray-50\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"px-6 py-3\",\n            children: \"Item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"px-6 py-3\",\n            children: col\n          }, col, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((section, sectionIndex) => Object.entries(section).map(([itemName, itemValue], itemIndex) => {\n          if (typeof itemValue === \"string\") {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-100\",\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: columns.length + 1,\n                className: \"font-bold px-6 py-4\",\n                children: itemName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 21\n              }, this)\n            }, `section-${sectionIndex}-item-${itemIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 19\n            }, this);\n          } else if (typeof itemValue === \"object\" && itemValue !== null) {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-white border-b\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 font-medium text-gray-900\",\n                children: itemName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this), columns.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4\",\n                children: itemValue[col] || \"-\"\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 23\n              }, this))]\n            }, `section-${sectionIndex}-item-${itemIndex}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 19\n            }, this);\n          } else {\n            return null;\n          }\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 544,\n    columnNumber: 5\n  }, this);\n};\n_c = ReportPage;\nexport default ReportPage;\nvar _c;\n$RefreshReg$(_c, \"ReportPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Table","TableBody","TableCell","TableHead","TableHeader","TableRow","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","jsxDEV","_jsxDEV","ReportPage","myData","selectedReport","children","fileName","_jsxFileName","lineNumber","columnNumber","data","Array","isArray","columnsSet","Set","forEach","section","Object","entries","key","value","keys","year","add","columns","from","className","map","col","sectionIndex","itemName","itemValue","itemIndex","colSpan","length","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/works/crediflow/frontend/crediflow-frontend/src/pages/report.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//     if (!reportId) return [];\r\n//     return [\r\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//     ];\r\n//   };\r\n\r\n// const ReportPage = () => {\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n\r\n//   const { data: options = [] } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [] } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* <Select onValueChange={setSelectedReport}> */}\r\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n\r\n\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {options.map((option) => (\r\n//                 //   <SelectItem key={option.id} value={option.id}>\r\n//                 //     {option.label}\r\n//                 //   </SelectItem>\r\n//                 <SelectItem key={option.id} value={option.id.toString()}>\r\n//                  {option.label}\r\n//                 </SelectItem>\r\n\r\n//                 ))}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {selectedReport && (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { useState,useEffect } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n\r\n// // Spinner component for loading state\r\n// const LoadingSpinner = () => (\r\n//   <div className=\"flex justify-center items-center\">\r\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\r\n//   </div>\r\n// );\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//   if (!reportId) return [];\r\n//   return [\r\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//   ];\r\n// };\r\n\r\n// const ReportPage = () => {\r\n//   const { state } = useLocation();\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n//   const [data, setData] = useState(null); // Store the API data\r\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [reportData, setReportData] = useState(null);\r\n\r\n//   const fileName = state?.fileName\r\n//   console.log(\"file :\",fileName)\r\n\r\n//   useEffect(() => {\r\n//     if (fileName) {\r\n//       const fetchReportData = async () => {\r\n//         setIsLoading(true);\r\n//         try {\r\n//           // Assuming the API is expecting a POST request with a JSON body\r\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\r\n//             fileName: fileName,\r\n//           });\r\n//           console.log('API response:', response.data);\r\n//           setReportData(response.data); // Store the response data\r\n//         } catch (error) {\r\n//           console.error('Error fetching report data:', error);\r\n//         } finally {\r\n//           setIsLoading(false);\r\n//         }\r\n//       };\r\n\r\n//       fetchReportData();\r\n//     }\r\n//   }, [fileName]);\r\n\r\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport // Only fetch if a report is selected\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* Select dropdown for report */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {optionsLoading ? (\r\n//                   <SelectItem disabled>Loading reports...</SelectItem>\r\n//                 ) : optionsError ? (\r\n//                   <SelectItem disabled>Error loading reports</SelectItem>\r\n//                 ) : (\r\n//                   options.map((option) => (\r\n//                     <SelectItem key={option.id} value={option.id.toString()}>\r\n//                       {option.label}\r\n//                     </SelectItem>\r\n//                   ))\r\n//                 )}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {reportLoading ? (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>Loading report data...</p>\r\n//             </div>\r\n//           ) : reportError ? (\r\n//             <div className=\"text-center text-red-600\">\r\n//               <p>Error loading report data. Please try again later.</p>\r\n//             </div>\r\n//           ) : selectedReport && reportData.length > 0 ? (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           ) : (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>No data available for the selected report.</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\n// // import { useQuery } from \"@tanstack/react-query\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n\r\n// const fetchOptions = async () => {\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const ReportPage = () => {\r\n  \r\n//   // const [reportData, setReportData] = useState(null);\r\n//   // const [error, setError] = useState(null);\r\n\r\n//   const { state } = useLocation();\r\n//   const { myData } = state || {};\r\n\r\n//   const [selectedReport, setSelectedReport] = useState('');\r\n//   const [reportKeys, setReportKeys] = useState([]);\r\n\r\n\r\n//   useEffect(() => {\r\n//     if (myData) {\r\n//       const keys = Object.keys(myData);\r\n//       setReportKeys(keys);\r\n//     }\r\n//   }, [myData]);\r\n\r\n\r\n//   console.log('Selected Report Data:', myData[selectedReport]);\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n\r\n//           <Select value={selectedReport} onValueChange={setSelectedReport}>\r\n//           <SelectTrigger className=\"w-full\">\r\n//             <SelectValue placeholder=\"Select a report\" />\r\n//           </SelectTrigger>\r\n//           <SelectContent>\r\n//             {myData && Object.keys(myData).map((key) => (\r\n//               <SelectItem key={key} value={String(key)}>\r\n//                 {key}\r\n//               </SelectItem>\r\n//             ))}\r\n//           </SelectContent>\r\n//         </Select>\r\n\r\n//           </div>\r\n\r\n          \r\n\r\n//           {selectedReport && myData[selectedReport] ? (\r\n//   <div className=\"overflow-x-auto\">\r\n//     <Table>\r\n//       <TableHeader>\r\n//         <TableRow>\r\n//           <TableHead>Item</TableHead>\r\n//           <TableHead>2020</TableHead>\r\n//           <TableHead>2019</TableHead>\r\n//         </TableRow>\r\n//       </TableHeader>\r\n//       <TableBody>\r\n//         {/* Handle nested objects */}\r\n//         {Object.entries(myData[selectedReport]).map(([itemName, itemValue]) => {\r\n//           if (typeof itemValue === \"object\" && !Array.isArray(itemValue)) {\r\n//             // If it's nested like \"Non-current assets\"\r\n//             return Object.entries(itemValue).map(([subItemName, subItemValue]) => (\r\n//               <TableRow key={itemName + subItemName}>\r\n//                 <TableCell className=\"font-medium\">{subItemName}</TableCell>\r\n//                 <TableCell>{subItemValue?.[\"2020\"] ?? \"-\"}</TableCell>\r\n//                 <TableCell>{subItemValue?.[\"2019\"] ?? \"-\"}</TableCell>\r\n//               </TableRow>\r\n//             ));\r\n//           } else {\r\n//             // Normal field\r\n//             return (\r\n//               <TableRow key={itemName}>\r\n//                 <TableCell className=\"font-medium\">{itemName}</TableCell>\r\n//                 <TableCell>{itemValue?.[\"2020\"] ?? \"-\"}</TableCell>\r\n//                 <TableCell>{itemValue?.[\"2019\"] ?? \"-\"}</TableCell>\r\n//               </TableRow>\r\n//             );\r\n//           }\r\n//         })}\r\n//       </TableBody>\r\n//     </Table>\r\n//   </div>\r\n// )  : (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>No data available for the selected report.</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n\r\n// const ReportPage = () => {\r\n//   const [selectedReport, setSelectedReport] = useState('');\r\n//   const [yearColumns, setYearColumns] = useState([]);\r\n//   const { state } = useLocation();\r\n//   const { myData } = state || {};\r\n\r\n//   useEffect(() => {\r\n//     if (selectedReport && myData[selectedReport]) {\r\n//       // Dynamically find all unique years/columns from data\r\n//       const yearsSet = new Set();\r\n\r\n//       myData[selectedReport].forEach(section => {\r\n//         Object.values(section).forEach(value => {\r\n//           if (typeof value === 'object' && value !== null) {\r\n//             Object.keys(value).forEach(year => {\r\n//               yearsSet.add(year);\r\n//             });\r\n//           }\r\n//         });\r\n//       });\r\n\r\n//       setYearColumns(Array.from(yearsSet).sort()); // Sorting years if needed\r\n//     }\r\n//   }, [selectedReport, myData]);\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">Crediflow report</h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n\r\n//             <Select value={selectedReport} onValueChange={(value) => setSelectedReport(value)}>\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {myData && Object.keys(myData).map((key) => (\r\n//                   <SelectItem key={key} value={key}>\r\n//                     {key}\r\n//                   </SelectItem>\r\n//                 ))}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n          \r\n//           {selectedReport && Array.isArray(myData[selectedReport]) ? (\r\n//   <div className=\"overflow-x-auto\">\r\n//     <Table>\r\n//       <TableHeader>\r\n//         <TableRow>\r\n//           <TableHead>Item</TableHead>\r\n//           {yearColumns.map((year) => (\r\n//             <TableHead key={year}>{year}</TableHead>\r\n//           ))}\r\n//         </TableRow>\r\n//       </TableHeader>\r\n//       <TableBody>\r\n//         {myData[selectedReport].map((section, sectionIndex) => (\r\n//           Object.entries(section).map(([itemName, itemValue]) => {\r\n//             if (typeof itemValue === \"string\") {\r\n//               return (\r\n//                 <TableRow key={sectionIndex + itemName}>\r\n//                   <TableCell colSpan={1 + yearColumns.length} className=\"font-bold bg-gray-100 text-gray-700\">\r\n//                     {itemName}\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               );\r\n//             } else if (typeof itemValue === \"object\") {\r\n//               return (\r\n//                 <TableRow key={sectionIndex + itemName}>\r\n//                   <TableCell className=\"font-medium\">{itemName}</TableCell>\r\n//                   {yearColumns.map((year) => (\r\n//                     <TableCell key={year}>\r\n//                       {itemValue[year] ?? \"-\"}\r\n//                     </TableCell>\r\n//                   ))}\r\n//                 </TableRow>\r\n//               );\r\n//             } else {\r\n//               return null;\r\n//             }\r\n//           })\r\n//         ))}\r\n//       </TableBody>\r\n//     </Table>\r\n//   </div>\r\n// ) : (\r\n//   <div className=\"text-center text-white\">\r\n//     <p>No data available for the selected report.</p>\r\n//   </div>\r\n// )}\r\n\r\n\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n\r\nconst ReportPage = ({ myData, selectedReport }) => {\r\n  if (!selectedReport || !myData[selectedReport]) {\r\n    return <div>Please select a report</div>;\r\n  }\r\n\r\n  const data = myData[selectedReport];\r\n\r\n  if (!Array.isArray(data)) {\r\n    return <div>Invalid data format</div>;\r\n  }\r\n\r\n  // Step 1: Collect all possible column names dynamically\r\n  const columnsSet = new Set();\r\n  data.forEach((section) => {\r\n    Object.entries(section).forEach(([key, value]) => {\r\n      if (typeof value === \"object\" && value !== null) {\r\n        Object.keys(value).forEach((year) => {\r\n          columnsSet.add(year);\r\n        });\r\n      }\r\n    });\r\n  });\r\n  const columns = Array.from(columnsSet);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"w-full text-sm text-left text-gray-500\">\r\n        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\r\n          <tr>\r\n            <th className=\"px-6 py-3\">Item</th>\r\n            {columns.map((col) => (\r\n              <th key={col} className=\"px-6 py-3\">\r\n                {col}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((section, sectionIndex) => (\r\n            Object.entries(section).map(([itemName, itemValue], itemIndex) => {\r\n              if (typeof itemValue === \"string\") {\r\n                return (\r\n                  <tr key={`section-${sectionIndex}-item-${itemIndex}`} className=\"bg-gray-100\">\r\n                    <td colSpan={columns.length + 1} className=\"font-bold px-6 py-4\">\r\n                      {itemName}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              } else if (typeof itemValue === \"object\" && itemValue !== null) {\r\n                return (\r\n                  <tr key={`section-${sectionIndex}-item-${itemIndex}`} className=\"bg-white border-b\">\r\n                    <td className=\"px-6 py-4 font-medium text-gray-900\">{itemName}</td>\r\n                    {columns.map((col) => (\r\n                      <td key={col} className=\"px-6 py-4\">\r\n                        {itemValue[col] || \"-\"}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}