{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\works\\\\crediflow\\\\frontend\\\\crediflow-frontend\\\\src\\\\pages\\\\report.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//     if (!reportId) return [];\n//     return [\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//     ];\n//   };\n\n// const ReportPage = () => {\n//   const [selectedReport, setSelectedReport] = useState(null);\n\n//   const { data: options = [] } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [] } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* <Select onValueChange={setSelectedReport}> */}\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {options.map((option) => (\n//                 //   <SelectItem key={option.id} value={option.id}>\n//                 //     {option.label}\n//                 //   </SelectItem>\n//                 <SelectItem key={option.id} value={option.id.toString()}>\n//                  {option.label}\n//                 </SelectItem>\n\n//                 ))}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {selectedReport && (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState,useEffect } from 'react';\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"../components/ui/select\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"../components/ui/table\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// // Spinner component for loading state\n// const LoadingSpinner = () => (\n//   <div className=\"flex justify-center items-center\">\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\n//   </div>\n// );\n\n// // Mock API calls - replace these with actual API endpoints\n// const fetchOptions = async () => {\n//   // Simulate API call\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const fetchReportData = async (reportId) => {\n//   if (!reportId) return [];\n//   return [\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\n//   ];\n// };\n\n// const ReportPage = () => {\n//   const { state } = useLocation();\n//   const [selectedReport, setSelectedReport] = useState(null);\n//   const [data, setData] = useState(null); // Store the API data\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [reportData, setReportData] = useState(null);\n\n//   const fileName = state?.fileName\n//   console.log(\"file :\",fileName)\n\n//   useEffect(() => {\n//     if (fileName) {\n//       const fetchReportData = async () => {\n//         setIsLoading(true);\n//         try {\n//           // Assuming the API is expecting a POST request with a JSON body\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\n//             fileName: fileName,\n//           });\n//           console.log('API response:', response.data);\n//           setReportData(response.data); // Store the response data\n//         } catch (error) {\n//           console.error('Error fetching report data:', error);\n//         } finally {\n//           setIsLoading(false);\n//         }\n//       };\n\n//       fetchReportData();\n//     }\n//   }, [fileName]);\n\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\n//     queryKey: ['reportOptions'],\n//     queryFn: fetchOptions\n//   });\n\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\n//     queryKey: ['reportData', selectedReport],\n//     queryFn: () => fetchReportData(selectedReport),\n//     enabled: !!selectedReport // Only fetch if a report is selected\n//   });\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n//             {/* Select dropdown for report */}\n//             <Select value={selectedReport} onChange={setSelectedReport}>\n//               <SelectTrigger className=\"w-full\">\n//                 <SelectValue placeholder=\"Select a report\" />\n//               </SelectTrigger>\n//               <SelectContent>\n//                 {optionsLoading ? (\n//                   <SelectItem disabled>Loading reports...</SelectItem>\n//                 ) : optionsError ? (\n//                   <SelectItem disabled>Error loading reports</SelectItem>\n//                 ) : (\n//                   options.map((option) => (\n//                     <SelectItem key={option.id} value={option.id.toString()}>\n//                       {option.label}\n//                     </SelectItem>\n//                   ))\n//                 )}\n//               </SelectContent>\n//             </Select>\n//           </div>\n\n//           {reportLoading ? (\n//             <div className=\"text-center text-white\">\n//               <p>Loading report data...</p>\n//             </div>\n//           ) : reportError ? (\n//             <div className=\"text-center text-red-600\">\n//               <p>Error loading report data. Please try again later.</p>\n//             </div>\n//           ) : selectedReport && reportData.length > 0 ? (\n//             <div className=\"overflow-x-auto\">\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Name</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   {reportData.map((row) => (\n//                     <TableRow key={row.id}>\n//                       <TableCell>{row.name}</TableCell>\n//                       <TableCell>${row.amount}</TableCell>\n//                       <TableCell>{row.status}</TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </div>\n//           ) : (\n//             <div className=\"text-center text-white\">\n//               <p>No data available for the selected report.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState, useEffect } from 'react';\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\n// // import { useQuery } from \"@tanstack/react-query\";\n// import { useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// const fetchOptions = async () => {\n//   return [\n//     { id: 1, label: \"January 2025 Report\" },\n//     { id: 2, label: \"February 2025 Report\" },\n//     { id: 3, label: \"March 2025 Report\" }\n//   ];\n// };\n\n// const ReportPage = () => {\n\n//   // const [reportData, setReportData] = useState(null);\n//   // const [error, setError] = useState(null);\n\n//   const { state } = useLocation();\n//   const { myData } = state || {};\n\n//   const [selectedReport, setSelectedReport] = useState('');\n//   const [reportKeys, setReportKeys] = useState([]);\n\n//   useEffect(() => {\n//     if (myData) {\n//       const keys = Object.keys(myData);\n//       setReportKeys(keys);\n//     }\n//   }, [myData]);\n\n//   console.log('Selected Report Data:', myData[selectedReport]);\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\n//           Crediflow report\n//         </h1>\n\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\n//           <div className=\"max-w-md mb-8\">\n\n//           <Select value={selectedReport} onValueChange={setSelectedReport}>\n//           <SelectTrigger className=\"w-full\">\n//             <SelectValue placeholder=\"Select a report\" />\n//           </SelectTrigger>\n//           <SelectContent>\n//             {myData && Object.keys(myData).map((key) => (\n//               <SelectItem key={key} value={String(key)}>\n//                 {key}\n//               </SelectItem>\n//             ))}\n//           </SelectContent>\n//         </Select>\n\n//           </div>\n\n//           {selectedReport && myData[selectedReport] ? (\n//   <div className=\"overflow-x-auto\">\n//     <Table>\n//       <TableHeader>\n//         <TableRow>\n//           <TableHead>Item</TableHead>\n//           <TableHead>2020</TableHead>\n//           <TableHead>2019</TableHead>\n//         </TableRow>\n//       </TableHeader>\n//       <TableBody>\n//         {/* Handle nested objects */}\n//         {Object.entries(myData[selectedReport]).map(([itemName, itemValue]) => {\n//           if (typeof itemValue === \"object\" && !Array.isArray(itemValue)) {\n//             // If it's nested like \"Non-current assets\"\n//             return Object.entries(itemValue).map(([subItemName, subItemValue]) => (\n//               <TableRow key={itemName + subItemName}>\n//                 <TableCell className=\"font-medium\">{subItemName}</TableCell>\n//                 <TableCell>{subItemValue?.[\"2020\"] ?? \"-\"}</TableCell>\n//                 <TableCell>{subItemValue?.[\"2019\"] ?? \"-\"}</TableCell>\n//               </TableRow>\n//             ));\n//           } else {\n//             // Normal field\n//             return (\n//               <TableRow key={itemName}>\n//                 <TableCell className=\"font-medium\">{itemName}</TableCell>\n//                 <TableCell>{itemValue?.[\"2020\"] ?? \"-\"}</TableCell>\n//                 <TableCell>{itemValue?.[\"2019\"] ?? \"-\"}</TableCell>\n//               </TableRow>\n//             );\n//           }\n//         })}\n//       </TableBody>\n//     </Table>\n//   </div>\n// )  : (\n//             <div className=\"text-center text-white\">\n//               <p>No data available for the selected report.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReportPage;\n\n////////////////////////////////////////////////////////////////\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportPage = () => {\n  _s();\n  const [selectedReport, setSelectedReport] = useState('');\n  const [yearColumns, setYearColumns] = useState([]);\n  const {\n    state\n  } = useLocation();\n  const {\n    myData\n  } = state || {};\n  useEffect(() => {\n    if (selectedReport && myData[selectedReport]) {\n      // Dynamically find all unique years/columns from data\n      const yearsSet = new Set();\n      myData[selectedReport].forEach(section => {\n        Object.values(section).forEach(value => {\n          if (typeof value === 'object' && value !== null) {\n            Object.keys(value).forEach(year => {\n              yearsSet.add(year);\n            });\n          }\n        });\n      });\n      setYearColumns(Array.from(yearsSet).sort()); // Sorting years if needed\n    }\n  }, [selectedReport, myData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl md:text-4xl font-bold text-white mb-8\",\n        children: \"Crediflow report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white/95 rounded-lg shadow-xl p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-md mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedReport,\n            onValueChange: value => setSelectedReport(value),\n            children: [/*#__PURE__*/_jsxDEV(SelectTrigger, {\n              className: \"w-full\",\n              children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                placeholder: \"Select a report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n              children: myData && Object.keys(myData).map(key => /*#__PURE__*/_jsxDEV(SelectItem, {\n                value: key,\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), selectedReport && Array.isArray(myData[selectedReport]) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: \"Item\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 11\n                }, this), yearColumns.map(year => /*#__PURE__*/_jsxDEV(TableHead, {\n                  children: year\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 13\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: myData[selectedReport].map((section, sectionIndex) => Object.entries(section).map(([itemName, itemValue]) => {\n                if (typeof itemValue === \"string\" && itemName.trim() !== \"\") {\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: /*#__PURE__*/_jsxDEV(TableCell, {\n                      colSpan: 1 + yearColumns.length,\n                      className: \"font-bold bg-gray-100 text-gray-700\",\n                      children: itemName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 471,\n                      columnNumber: 19\n                    }, this)\n                  }, sectionIndex + itemName, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 470,\n                    columnNumber: 17\n                  }, this);\n                } else if (typeof itemValue === \"object\") {\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      className: \"font-medium\",\n                      children: itemName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 479,\n                      columnNumber: 19\n                    }, this), yearColumns.map(year => {\n                      var _itemValue$year;\n                      return /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: (_itemValue$year = itemValue[year]) !== null && _itemValue$year !== void 0 ? _itemValue$year : \"-\"\n                      }, year, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 481,\n                        columnNumber: 21\n                      }, this);\n                    })]\n                  }, sectionIndex + itemName, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 478,\n                    columnNumber: 17\n                  }, this);\n                } else {\n                  return null;\n                }\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 3\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data available for the selected report.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportPage, \"A1nT9H6lx4/si7vAXZWu3LlPj8o=\", false, function () {\n  return [useLocation];\n});\n_c = ReportPage;\nexport default ReportPage;\nvar _c;\n$RefreshReg$(_c, \"ReportPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Table","TableBody","TableCell","TableHead","TableHeader","TableRow","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","jsxDEV","_jsxDEV","ReportPage","_s","selectedReport","setSelectedReport","yearColumns","setYearColumns","state","myData","yearsSet","Set","forEach","section","Object","values","value","keys","year","add","Array","from","sort","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onValueChange","placeholder","map","key","isArray","sectionIndex","entries","itemName","itemValue","trim","colSpan","length","_itemValue$year","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/works/crediflow/frontend/crediflow-frontend/src/pages/report.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//     if (!reportId) return [];\r\n//     return [\r\n//       { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//       { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//       { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//     ];\r\n//   };\r\n\r\n// const ReportPage = () => {\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n\r\n//   const { data: options = [] } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [] } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     // queryFn: () => selectedReport ? fetchReportData(selectedReport) : [],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* <Select onValueChange={setSelectedReport}> */}\r\n//             {/* <Select onValueChange={(val) => setSelectedReport(Number(val))}> */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n\r\n\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {options.map((option) => (\r\n//                 //   <SelectItem key={option.id} value={option.id}>\r\n//                 //     {option.label}\r\n//                 //   </SelectItem>\r\n//                 <SelectItem key={option.id} value={option.id.toString()}>\r\n//                  {option.label}\r\n//                 </SelectItem>\r\n\r\n//                 ))}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {selectedReport && (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { useState,useEffect } from 'react';\r\n// import {\r\n//   Select,\r\n//   SelectContent,\r\n//   SelectItem,\r\n//   SelectTrigger,\r\n//   SelectValue,\r\n// } from \"../components/ui/select\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"../components/ui/table\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n\r\n// // Spinner component for loading state\r\n// const LoadingSpinner = () => (\r\n//   <div className=\"flex justify-center items-center\">\r\n//     <div className=\"w-8 h-8 border-4 border-t-4 border-green-500 rounded-full animate-spin\"></div>\r\n//   </div>\r\n// );\r\n\r\n// // Mock API calls - replace these with actual API endpoints\r\n// const fetchOptions = async () => {\r\n//   // Simulate API call\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const fetchReportData = async (reportId) => {\r\n//   if (!reportId) return [];\r\n//   return [\r\n//     { id: 1, name: \"John Doe\", amount: 1000, status: \"Paid\" },\r\n//     { id: 2, name: \"Jane Smith\", amount: 2000, status: \"Pending\" },\r\n//     { id: 3, name: \"Bob Johnson\", amount: 1500, status: \"Paid\" }\r\n//   ];\r\n// };\r\n\r\n// const ReportPage = () => {\r\n//   const { state } = useLocation();\r\n//   const [selectedReport, setSelectedReport] = useState(null);\r\n//   const [data, setData] = useState(null); // Store the API data\r\n//   const [isLoading, setIsLoading] = useState(true); // Track the loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [reportData, setReportData] = useState(null);\r\n\r\n//   const fileName = state?.fileName\r\n//   console.log(\"file :\",fileName)\r\n\r\n//   useEffect(() => {\r\n//     if (fileName) {\r\n//       const fetchReportData = async () => {\r\n//         setIsLoading(true);\r\n//         try {\r\n//           // Assuming the API is expecting a POST request with a JSON body\r\n//           const response = await axios.post('http://127.0.0.1:5000/start-process', {\r\n//             fileName: fileName,\r\n//           });\r\n//           console.log('API response:', response.data);\r\n//           setReportData(response.data); // Store the response data\r\n//         } catch (error) {\r\n//           console.error('Error fetching report data:', error);\r\n//         } finally {\r\n//           setIsLoading(false);\r\n//         }\r\n//       };\r\n\r\n//       fetchReportData();\r\n//     }\r\n//   }, [fileName]);\r\n\r\n//   const { data: options = [], isLoading: optionsLoading, error: optionsError } = useQuery({\r\n//     queryKey: ['reportOptions'],\r\n//     queryFn: fetchOptions\r\n//   });\r\n\r\n//   const { data: reportData = [], isLoading: reportLoading, error: reportError } = useQuery({\r\n//     queryKey: ['reportData', selectedReport],\r\n//     queryFn: () => fetchReportData(selectedReport),\r\n//     enabled: !!selectedReport // Only fetch if a report is selected\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n//             {/* Select dropdown for report */}\r\n//             <Select value={selectedReport} onChange={setSelectedReport}>\r\n//               <SelectTrigger className=\"w-full\">\r\n//                 <SelectValue placeholder=\"Select a report\" />\r\n//               </SelectTrigger>\r\n//               <SelectContent>\r\n//                 {optionsLoading ? (\r\n//                   <SelectItem disabled>Loading reports...</SelectItem>\r\n//                 ) : optionsError ? (\r\n//                   <SelectItem disabled>Error loading reports</SelectItem>\r\n//                 ) : (\r\n//                   options.map((option) => (\r\n//                     <SelectItem key={option.id} value={option.id.toString()}>\r\n//                       {option.label}\r\n//                     </SelectItem>\r\n//                   ))\r\n//                 )}\r\n//               </SelectContent>\r\n//             </Select>\r\n//           </div>\r\n\r\n//           {reportLoading ? (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>Loading report data...</p>\r\n//             </div>\r\n//           ) : reportError ? (\r\n//             <div className=\"text-center text-red-600\">\r\n//               <p>Error loading report data. Please try again later.</p>\r\n//             </div>\r\n//           ) : selectedReport && reportData.length > 0 ? (\r\n//             <div className=\"overflow-x-auto\">\r\n//               <Table>\r\n//                 <TableHeader>\r\n//                   <TableRow>\r\n//                     <TableHead>Name</TableHead>\r\n//                     <TableHead>Amount</TableHead>\r\n//                     <TableHead>Status</TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {reportData.map((row) => (\r\n//                     <TableRow key={row.id}>\r\n//                       <TableCell>{row.name}</TableCell>\r\n//                       <TableCell>${row.amount}</TableCell>\r\n//                       <TableCell>{row.status}</TableCell>\r\n//                     </TableRow>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           ) : (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>No data available for the selected report.</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\n// // import { useQuery } from \"@tanstack/react-query\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n\r\n// const fetchOptions = async () => {\r\n//   return [\r\n//     { id: 1, label: \"January 2025 Report\" },\r\n//     { id: 2, label: \"February 2025 Report\" },\r\n//     { id: 3, label: \"March 2025 Report\" }\r\n//   ];\r\n// };\r\n\r\n// const ReportPage = () => {\r\n  \r\n//   // const [reportData, setReportData] = useState(null);\r\n//   // const [error, setError] = useState(null);\r\n\r\n//   const { state } = useLocation();\r\n//   const { myData } = state || {};\r\n\r\n//   const [selectedReport, setSelectedReport] = useState('');\r\n//   const [reportKeys, setReportKeys] = useState([]);\r\n\r\n\r\n//   useEffect(() => {\r\n//     if (myData) {\r\n//       const keys = Object.keys(myData);\r\n//       setReportKeys(keys);\r\n//     }\r\n//   }, [myData]);\r\n\r\n\r\n//   console.log('Selected Report Data:', myData[selectedReport]);\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n//       <div className=\"container mx-auto px-4 py-8\">\r\n//         <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">\r\n//           Crediflow report\r\n//         </h1>\r\n\r\n//         <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n//           <div className=\"max-w-md mb-8\">\r\n\r\n//           <Select value={selectedReport} onValueChange={setSelectedReport}>\r\n//           <SelectTrigger className=\"w-full\">\r\n//             <SelectValue placeholder=\"Select a report\" />\r\n//           </SelectTrigger>\r\n//           <SelectContent>\r\n//             {myData && Object.keys(myData).map((key) => (\r\n//               <SelectItem key={key} value={String(key)}>\r\n//                 {key}\r\n//               </SelectItem>\r\n//             ))}\r\n//           </SelectContent>\r\n//         </Select>\r\n\r\n//           </div>\r\n\r\n          \r\n\r\n//           {selectedReport && myData[selectedReport] ? (\r\n//   <div className=\"overflow-x-auto\">\r\n//     <Table>\r\n//       <TableHeader>\r\n//         <TableRow>\r\n//           <TableHead>Item</TableHead>\r\n//           <TableHead>2020</TableHead>\r\n//           <TableHead>2019</TableHead>\r\n//         </TableRow>\r\n//       </TableHeader>\r\n//       <TableBody>\r\n//         {/* Handle nested objects */}\r\n//         {Object.entries(myData[selectedReport]).map(([itemName, itemValue]) => {\r\n//           if (typeof itemValue === \"object\" && !Array.isArray(itemValue)) {\r\n//             // If it's nested like \"Non-current assets\"\r\n//             return Object.entries(itemValue).map(([subItemName, subItemValue]) => (\r\n//               <TableRow key={itemName + subItemName}>\r\n//                 <TableCell className=\"font-medium\">{subItemName}</TableCell>\r\n//                 <TableCell>{subItemValue?.[\"2020\"] ?? \"-\"}</TableCell>\r\n//                 <TableCell>{subItemValue?.[\"2019\"] ?? \"-\"}</TableCell>\r\n//               </TableRow>\r\n//             ));\r\n//           } else {\r\n//             // Normal field\r\n//             return (\r\n//               <TableRow key={itemName}>\r\n//                 <TableCell className=\"font-medium\">{itemName}</TableCell>\r\n//                 <TableCell>{itemValue?.[\"2020\"] ?? \"-\"}</TableCell>\r\n//                 <TableCell>{itemValue?.[\"2019\"] ?? \"-\"}</TableCell>\r\n//               </TableRow>\r\n//             );\r\n//           }\r\n//         })}\r\n//       </TableBody>\r\n//     </Table>\r\n//   </div>\r\n// )  : (\r\n//             <div className=\"text-center text-white\">\r\n//               <p>No data available for the selected report.</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\r\n\r\nconst ReportPage = () => {\r\n  const [selectedReport, setSelectedReport] = useState('');\r\n  const [yearColumns, setYearColumns] = useState([]);\r\n  const { state } = useLocation();\r\n  const { myData } = state || {};\r\n\r\n  useEffect(() => {\r\n    if (selectedReport && myData[selectedReport]) {\r\n      // Dynamically find all unique years/columns from data\r\n      const yearsSet = new Set();\r\n\r\n      myData[selectedReport].forEach(section => {\r\n        Object.values(section).forEach(value => {\r\n          if (typeof value === 'object' && value !== null) {\r\n            Object.keys(value).forEach(year => {\r\n              yearsSet.add(year);\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      setYearColumns(Array.from(yearsSet).sort()); // Sorting years if needed\r\n    }\r\n  }, [selectedReport, myData]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-600 to-teal-700\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-8\">Crediflow report</h1>\r\n\r\n        <div className=\"bg-white/95 rounded-lg shadow-xl p-6\">\r\n          <div className=\"max-w-md mb-8\">\r\n\r\n            <Select value={selectedReport} onValueChange={(value) => setSelectedReport(value)}>\r\n              <SelectTrigger className=\"w-full\">\r\n                <SelectValue placeholder=\"Select a report\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {myData && Object.keys(myData).map((key) => (\r\n                  <SelectItem key={key} value={key}>\r\n                    {key}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          \r\n          {selectedReport && Array.isArray(myData[selectedReport]) ? (\r\n  <div className=\"overflow-x-auto\">\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableHead>Item</TableHead>\r\n          {yearColumns.map((year) => (\r\n            <TableHead key={year}>{year}</TableHead>\r\n          ))}\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {myData[selectedReport].map((section, sectionIndex) => (\r\n          Object.entries(section).map(([itemName, itemValue]) => {\r\n            if (typeof itemValue === \"string\" && itemName.trim() !== \"\") {\r\n              return (\r\n                <TableRow key={sectionIndex + itemName}>\r\n                  <TableCell colSpan={1 + yearColumns.length} className=\"font-bold bg-gray-100 text-gray-700\">\r\n                    {itemName}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            } else if (typeof itemValue === \"object\") {\r\n              return (\r\n                <TableRow key={sectionIndex + itemName}>\r\n                  <TableCell className=\"font-medium\">{itemName}</TableCell>\r\n                  {yearColumns.map((year) => (\r\n                    <TableCell key={year}>\r\n                      {itemValue[year] ?? \"-\"}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  </div>\r\n) : (\r\n  <div className=\"text-center text-white\">\r\n    <p>No data available for the selected report.</p>\r\n  </div>\r\n)}\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportPage;\r\n\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}